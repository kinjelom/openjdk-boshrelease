---
resources:
- name: repo
  type: git
  source:
    uri: git@github.com:making/openjdk-boshrelease.git
    branch: master
    private_key: ((github-private-key))
    ignore_paths:
    - ci/*
    # - manifest/*
    - README.md
- name: repo-version
  type: semver
  source:
    uri: git@github.com:making/openjdk-boshrelease.git
    branch: version
    private_key: ((github-private-key))
    file: version
    driver: git
- name: gh-release
  type: github-release
  source:
    user: making
    repository: openjdk-boshrelease
    access_token: ((github-access-token))

jobs:
- name: bosh-deploy-dev-in-exsiting-env
  serial: true
  plan:
  - aggregate:
    - get: repo
      trigger: true
  - task: download-blobs
    config:
      <<: *DOWNLOAD_BLOBS
  - task: bosh-create-release
    config:
      <<: *BOSH_CREATE_RELEASE
- name: ship-it
  serial: true
  plan:
  - aggregate:
    - get: repo
      # passed:
      # - bosh-deploy-dev-in-exsiting-env
      # - bosh-deploy-dev-in-docker
    - get: repo-version
  - task: download-blobs
    config:
      <<: *DOWNLOAD_BLOBS
  - task: create-release
    params:
      <<: *BOSH
      GIT_EMAIL: ((git-email))
      GIT_NAME: ((git-name))
      S3_ACCESS_KEY_ID: ((s3-access-key-id))
      S3_SECRET_ACCESS_KEY: ((s3-secret-access-key))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: bosh/main-bosh-docker
      inputs:
      - name: repo
      - name: repo-version
      - name: compiled
      outputs:
      - name: releases
      - name: updated-repo
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          cd repo
          shopt -s dotglob
          cp -r ./* ../updated-repo
          VERSION=`cat ../repo-version/number`
          TARBALL=openjdk-boshrelease-${VERSION}.tgz
          ln -s ../compiled ./.downloads
          ./add-blobs.sh
          cat <<EOF > config/private.yml
          ---
          blobstore:
            options:
              access_key_id: ${S3_ACCESS_KEY_ID}
              secret_access_key: ${S3_SECRET_ACCESS_KEY}
          EOF
          mkdir -p src
          bosh create-release --force --version=${VERSION} --final --tarball=../releases/${TARBALL}
          SHA1=`sha1sum ../releases/${TARBALL} | awk '{print $1}'`
          mkdir -p .sha1
          echo ${SHA1} > .sha1/${VERSION}
          cp -r ./* ../updated-repo
          cd ../updated-repo
          git config --global user.email "${GIT_EMAIL}"
          git config --global user.name "${GIT_NAME}"
          git add -A
          git commit -m "Release ${VERSION}"
          # Release Note
          cat <<EOF > ../releases/note.md
          ## Deployment
          \`\`\` yaml
          # manifest.yml
          ---
          name: openjdk
          releases:
          - name: openjdk
            version: ${VERSION}
            url: https://github.com/making/openjdk-boshrelease/releases/download/${VERSION}/${TARBALL}
            sha1: ${SHA1}
          \`\`\`
          EOF
  - put: repo
    params:
      repository: updated-repo
      tag: repo-version/number
  - put: gh-release
    params:
      name: repo-version/number
      tag: repo-version/number
      body: releases/note.md
      globs:
      - releases/*.tgz

########################################

- name: bump-to-next-patch-version
  plan:
  - aggregate:
    - get: repo
      trigger: true
      passed:
      - ship-it
    - get: repo-version
      params:
        bump: patch
  - put: repo-version
    params:
      file: repo-version/number

- name: bump-to-next-minor-version
  plan:
  - aggregate:
    - get: repo-version
      params:
        bump: minor
  - put: repo-version
    params:
      file: repo-version/number

- name: bump-to-next-majar-version
  plan:
  - aggregate:
    - get: repo-version
      params:
        bump: majar
  - put: repo-version
    params:
      file: repo-version/number

params:
  bosh: &BOSH
    BOSH_CLIENT: ((bosh-client))
    BOSH_ENVIRONMENT: ((bosh-environment))
    BOSH_CLIENT_SECRET: ((bosh-client-secret))
    BOSH_CA_CERT: ((bosh-ca-cert))
tasks:
  download-blobs: &DOWNLOAD_BLOBS
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: bosh/main-bosh-docker
    inputs:
    - name: repo
    outputs:
    - name: compiled
    caches:
    - path: repo/blobs
    - path: repo/.download
    run:
      path: bash
      args: 
      - -c
      - |
        set -e
        cd repo
        ./add-blobs.sh
        cp -ra blobs/* ../compiled/
        find ../compiled  
  bosh-create-release: &BOSH_CREATE_RELEASE
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: bosh/main-bosh-docker
    inputs:
    - name: repo
    - name: compiled
    outputs:
    - name: releases
    run:
      path: bash
      args: 
      - -c
      - |
        set -e
        cd repo
        ln -s ../compiled ./.downloads
        ./add-blobs.sh
        mkdir -p src
        bosh create-release --name=openjdk-dev --force --timestamp-version --tarball=../releases/openjdk-boshrelease.tgz
